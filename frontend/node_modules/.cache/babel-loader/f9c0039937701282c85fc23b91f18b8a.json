{"ast":null,"code":"var _jsxFileName = \"/home/rabis/ws-devsuperior/projeto-sds3/frontend/src/components/BarChart/index.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport Chart from \"react-apexcharts\";\nimport { round } from \"utils/format\";\nimport { BASE_URL } from \"utils/requests\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst BarChart = () => {\n  _s();\n\n  const [chartData, setChartData] = useState({\n    labels: {\n      categories: []\n    },\n    series: [{\n      name: \"\",\n      data: []\n    }]\n  });\n  useEffect(() => {\n    axios.get(`${BASE_URL}/sales/success-by-seller`).then(response => {\n      const data = response.data;\n      const myLabels = data.map(seller => seller.sellerName);\n      const mySeries = data.map(seller => round(100.00 * seller.deals / seller.visited, 1));\n      setChartData({\n        labels: {\n          categories: myLabels\n        },\n        series: [{\n          name: \"% Success\",\n          data: mySeries\n        }]\n      });\n    });\n  }, []);\n  const options = {\n    plotOptions: {\n      bar: {\n        horizontal: true\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Chart, {\n      options: { ...options,\n        xaxis: chartData.labels\n      },\n      series: chartData.series,\n      type: \"bar\",\n      height: \"240\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 4\n    }, this)\n  }, void 0, false);\n};\n\n_s(BarChart, \"fc9TZZYAAkPlFAw6JXNMpIQuaHw=\");\n\n_c = BarChart;\nexport default BarChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"BarChart\");","map":{"version":3,"sources":["/home/rabis/ws-devsuperior/projeto-sds3/frontend/src/components/BarChart/index.tsx"],"names":["axios","useEffect","useState","Chart","round","BASE_URL","BarChart","chartData","setChartData","labels","categories","series","name","data","get","then","response","myLabels","map","seller","sellerName","mySeries","deals","visited","options","plotOptions","bar","horizontal","xaxis"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AAEA,SAASC,KAAT,QAAsB,cAAtB;AACA,SAASC,QAAT,QAAyB,gBAAzB;;;;AAcA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAY;AACrDO,IAAAA,MAAM,EAAE;AACPC,MAAAA,UAAU,EAAE;AADL,KAD6C;AAIrDC,IAAAA,MAAM,EAAE,CACP;AACCC,MAAAA,IAAI,EAAE,EADP;AAECC,MAAAA,IAAI,EAAE;AAFP,KADO;AAJ6C,GAAZ,CAA1C;AAYAZ,EAAAA,SAAS,CAAC,MAAM;AACfD,IAAAA,KAAK,CAACc,GAAN,CAAW,GAAET,QAAS,0BAAtB,EAAiDU,IAAjD,CAAuDC,QAAD,IAAc;AACnE,YAAMH,IAAI,GAAGG,QAAQ,CAACH,IAAtB;AACA,YAAMI,QAAQ,GAAGJ,IAAI,CAACK,GAAL,CAASC,MAAM,IAAIA,MAAM,CAACC,UAA1B,CAAjB;AACA,YAAMC,QAAQ,GAAGR,IAAI,CAACK,GAAL,CAASC,MAAM,IAAIf,KAAK,CAAE,SAASe,MAAM,CAACG,KAAhB,GAAwBH,MAAM,CAACI,OAAjC,EAA2C,CAA3C,CAAxB,CAAjB;AACAf,MAAAA,YAAY,CAAC;AACZC,QAAAA,MAAM,EAAE;AACPC,UAAAA,UAAU,EAAEO;AADL,SADI;AAIZN,QAAAA,MAAM,EAAE,CACP;AACCC,UAAAA,IAAI,EAAE,WADP;AAECC,UAAAA,IAAI,EAAEQ;AAFP,SADO;AAJI,OAAD,CAAZ;AAWA,KAfD;AAiBA,GAlBQ,EAkBN,EAlBM,CAAT;AAoBA,QAAMG,OAAO,GAAG;AACfC,IAAAA,WAAW,EAAE;AACZC,MAAAA,GAAG,EAAE;AACJC,QAAAA,UAAU,EAAE;AADR;AADO;AADE,GAAhB;AAQA,sBACC;AAAA,2BACC,QAAC,KAAD;AACC,MAAA,OAAO,EAAE,EAAC,GAAGH,OAAJ;AAAaI,QAAAA,KAAK,EAAErB,SAAS,CAACE;AAA9B,OADV;AAEC,MAAA,MAAM,EAAEF,SAAS,CAACI,MAFnB;AAGC,MAAA,IAAI,EAAC,KAHN;AAIC,MAAA,MAAM,EAAC;AAJR;AAAA;AAAA;AAAA;AAAA;AADD,mBADD;AAUA,CAnDD;;GAAML,Q;;KAAAA,Q;AAqDN,eAAeA,QAAf","sourcesContent":["import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport Chart from \"react-apexcharts\";\nimport { SaleSuccess } from \"types/sale\";\nimport { round } from \"utils/format\";\nimport { BASE_URL } from \"utils/requests\";\n\ntype SeriesData = {\n\tname: string;\n\tdata: number[];\n}\n\ntype ChartData = {\n\tlabels: {\n\t\tcategories: string[]\n\t};\n\tseries: SeriesData[];\n}\n\nconst BarChart = () => {\n\tconst [chartData, setChartData] = useState<ChartData>({\n\t\tlabels: {\n\t\t\tcategories: []\n\t\t},\n\t\tseries: [\n\t\t\t{\n\t\t\t\tname: \"\",\n\t\t\t\tdata: []\n\t\t\t}\n\t\t]\n\t});\n\n\tuseEffect(() => {\n\t\taxios.get(`${BASE_URL}/sales/success-by-seller`).then((response) => {\n\t\t\tconst data = response.data as SaleSuccess[];\n\t\t\tconst myLabels = data.map(seller => seller.sellerName);\n\t\t\tconst mySeries = data.map(seller => round((100.00 * seller.deals / seller.visited), 1));\n\t\t\tsetChartData({\n\t\t\t\tlabels: {\n\t\t\t\t\tcategories: myLabels\n\t\t\t\t},\n\t\t\t\tseries: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"% Success\",\n\t\t\t\t\t\tdata: mySeries\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t});\n\t\t});\n\n\t}, []);\n\n\tconst options = {\n\t\tplotOptions: {\n\t\t\tbar: {\n\t\t\t\thorizontal: true,\n\t\t\t}\n\t\t},\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Chart\n\t\t\t\toptions={{...options, xaxis: chartData.labels}}\n\t\t\t\tseries={chartData.series}\n\t\t\t\ttype=\"bar\"\n\t\t\t\theight=\"240\"\n\t\t\t/>\n\t\t</>\n\t);\n};\n\nexport default BarChart;\n"]},"metadata":{},"sourceType":"module"}