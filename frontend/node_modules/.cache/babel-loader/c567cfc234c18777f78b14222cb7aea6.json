{"ast":null,"code":"var _jsxFileName = \"/home/rabis/ws-devsuperior/projeto-sds3/frontend/src/components/DonutChart/index.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport Chart from \"react-apexcharts\";\nimport { BASE_URL } from \"utils/requests\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst DonutChart = () => {\n  _s();\n\n  const [chartData, setChartData] = useState({\n    labels: [],\n    series: []\n  });\n  axios.get(`${BASE_URL}/sales/amount-by-seller`).then(response => {\n    const data = response.data;\n    const myLabels = data.map(seller => seller.sellerName);\n    const mySeries = data.map(seller => seller.sum);\n    chartData = {\n      labels: myLabels,\n      series: mySeries\n    };\n    console.log(chartData);\n  }); // const mockData = {\n  // \tseries: [\n  // \t\t477138,\n  // \t\t499928,\n  // \t\t444867,\n  // \t\t220426,\n  // \t\t473088\n  // \t],\n  // \tlabels: [\n  // \t\t\"Anakin\",\n  // \t\t\"Barry Allen\",\n  // \t\t\"Kal-El\",\n  // \t\t\"Logan\",\n  // \t\t\"Padmé\"\n  // \t]\n  // }\n\n  const options = {\n    legend: {\n      show: true\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Chart, {\n      options: { ...options,\n        labels: chartData.labels\n      },\n      series: chartData.series,\n      type: \"donut\",\n      height: \"240\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 4\n    }, this)\n  }, void 0, false);\n};\n\n_s(DonutChart, \"8uWuVeKIXAbfZgjGo6D73rm6HG4=\");\n\n_c = DonutChart;\nexport default DonutChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"DonutChart\");","map":{"version":3,"sources":["/home/rabis/ws-devsuperior/projeto-sds3/frontend/src/components/DonutChart/index.tsx"],"names":["axios","useState","Chart","BASE_URL","DonutChart","chartData","setChartData","labels","series","get","then","response","data","myLabels","map","seller","sellerName","mySeries","sum","console","log","options","legend","show"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AAEA,SAASC,QAAT,QAAyB,gBAAzB;;;;AAOA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACxB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAY;AACrDM,IAAAA,MAAM,EAAE,EAD6C;AAErDC,IAAAA,MAAM,EAAE;AAF6C,GAAZ,CAA1C;AAKAR,EAAAA,KAAK,CAACS,GAAN,CAAW,GAAEN,QAAS,yBAAtB,EAAgDO,IAAhD,CAAsDC,QAAD,IAAc;AAClE,UAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAtB;AACA,UAAMC,QAAQ,GAAGD,IAAI,CAACE,GAAL,CAASC,MAAM,IAAIA,MAAM,CAACC,UAA1B,CAAjB;AACA,UAAMC,QAAQ,GAAGL,IAAI,CAACE,GAAL,CAASC,MAAM,IAAIA,MAAM,CAACG,GAA1B,CAAjB;AACAb,IAAAA,SAAS,GAAG;AACXE,MAAAA,MAAM,EAAEM,QADG;AAEXL,MAAAA,MAAM,EAAES;AAFG,KAAZ;AAKAE,IAAAA,OAAO,CAACC,GAAR,CAAYf,SAAZ;AACA,GAVD,EANwB,CAkBxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMgB,OAAO,GAAG;AACfC,IAAAA,MAAM,EAAE;AACPC,MAAAA,IAAI,EAAE;AADC;AADO,GAAhB;AAMA,sBACC;AAAA,2BACC,QAAC,KAAD;AACC,MAAA,OAAO,EAAE,EAAC,GAAGF,OAAJ;AAAad,QAAAA,MAAM,EAAEF,SAAS,CAACE;AAA/B,OADV;AAEC,MAAA,MAAM,EAAEF,SAAS,CAACG,MAFnB;AAGC,MAAA,IAAI,EAAC,OAHN;AAIC,MAAA,MAAM,EAAC;AAJR;AAAA;AAAA;AAAA;AAAA;AADD,mBADD;AAUA,CAnDD;;GAAMJ,U;;KAAAA,U;AAqDN,eAAeA,UAAf","sourcesContent":["import axios from \"axios\";\nimport { useState } from \"react\";\nimport Chart from \"react-apexcharts\";\nimport { SaleSum } from \"types/sale\";\nimport { BASE_URL } from \"utils/requests\";\n\ntype ChartData = {\n\tlabels: string[];\n\tseries: number[];\n}\n\nconst DonutChart = () => {\n\tconst [chartData, setChartData] = useState<ChartData>({\n\t\tlabels: [],\n\t\tseries: []\n\t}); \n\n\taxios.get(`${BASE_URL}/sales/amount-by-seller`).then((response) => {\n\t\tconst data = response.data as SaleSum[];\n\t\tconst myLabels = data.map(seller => seller.sellerName);\n\t\tconst mySeries = data.map(seller => seller.sum);\n\t\tchartData = {\n\t\t\tlabels: myLabels,\n\t\t\tseries: mySeries\n\t\t};\n\t\t\n\t\tconsole.log(chartData);\n\t});\n\n\t// const mockData = {\n\t// \tseries: [\n\t// \t\t477138,\n\t// \t\t499928,\n\t// \t\t444867,\n\t// \t\t220426,\n\t// \t\t473088\n\t// \t],\n\t// \tlabels: [\n\t// \t\t\"Anakin\",\n\t// \t\t\"Barry Allen\",\n\t// \t\t\"Kal-El\",\n\t// \t\t\"Logan\",\n\t// \t\t\"Padmé\"\n\t// \t]\n\t// }\n\n\tconst options = {\n\t\tlegend: {\n\t\t\tshow: true\n\t\t}\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<Chart\n\t\t\t\toptions={{...options, labels: chartData.labels}}\n\t\t\t\tseries={chartData.series}\n\t\t\t\ttype=\"donut\"\n\t\t\t\theight=\"240\"\n\t\t\t/>\n\t\t</>\n\t);\n};\n\nexport default DonutChart;\n"]},"metadata":{},"sourceType":"module"}